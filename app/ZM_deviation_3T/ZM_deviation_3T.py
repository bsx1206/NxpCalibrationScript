'''
Created on May 21, 2021

@author: Mark.Kan
'''
import sys
sys.path.append(r'../')
sys.path.append(r'../../driver/')
sys.path.append(r'../../equipment/')
sys.path.append(r'../../equipment/power/')
sys.path.append(r'../../equipment/oven')
sys.path.append(r'../../equipment/mux')
sys.path.append(r'../../equipment/multimeter')
sys.path.append(r'../../equipment/tempref')
sys.path.append(r'../../equipment/counter')
import time, math
import phy, api, reg
import configparser
from csv import reader
import matplotlib.pyplot as plt
import numpy as np
import os
import platform
import testsInit
base_dir=os.path.dirname(os.path.abspath(__file__))

test=testsInit.TEST(os.path.join(base_dir, 'setting.conf'))
# define report file name
ReportName = test.reportName

# set the com number you used
COM = "COM"+test.getConfig('parameter setting','COM_PORT') if platform.system().lower()=='windows' else config.get('parameter setting','COM_PORT')

# "Enable" : LFNS bit SET;
# "Disable ": LFNS bit RESET
LFNS="Enable" if test.getConfig("parameter setting","LFNS_SET") =='1' else "Disable"

# 0 without RSC0 data
# 1 with RSC0 data
getrsc0flag=int(test.getConfig('parameter setting','getrsc0'))

# 0 all test;
# 1 odd id test;
# 2 even id test;
# 3 specific id;
# 4 first cycle odd id, than next even id
# 5 first cycle even id, than next odd id
# 6 one by one
zm_mode_set=int(test.getConfig('parameter setting','zm_mode_set'))

# while zm_mode_set is 3 ;
# this value will specific the id you want to test;
# must in range 0x02 to 0xFC
test_id=int(test.getConfig('parameter setting','test_id'))

# 0 the odd-even cells use the different freq;
# 1 the odd-even cells use the same freq;
zm_freq_set=int(test.getConfig('parameter setting','zm_freq_set'))

# 0 will use the calculated value ,this may cause the long time delay in ZM;
# 1 set the freq to the nearly freq in spec_freq_lst;
set_specfic_freq=int(test.getConfig('parameter setting','set_specfic_freq'))

# cycle times
CyclesNo = int(test.getConfig('parameter setting','CyclesNo'))

# cycle times
CyclesDelay = int(test.getConfig('parameter setting','CyclesDelay'))

# specific the sampling times of gain x16;
gainx16times = int(test.getConfig('parameter setting','gainx16times'))

# specific the sampling times of gain x4;
gainx4times = int(test.getConfig('parameter setting','gainx4times'))

# specific the sampling times of gain x1;
gainx1times = int(test.getConfig('parameter setting','gainx1times'))

# specific the gain you want
Gain_Range = test.getConfig('parameter setting','Gain_Range')
Gain_Range = Gain_Range.split(',')
# specific the resistor value used in hardware;
# unit is ohm
Rext = float(test.getConfig('parameter setting','Rext'))

# gain x16 x4 minimum freq
# unit Hz
minumfreqgainx16 = float(test.getConfig('parameter setting','minumfreqgainx16'))

#gain x1 minimum freq
# minumfreqgainx1=0.8
minumfreqgainx1=float(test.getConfig('parameter setting','minumfreqgainx1'))
# set frequency range
# unit Hz
swdebuglog=int(test.getConfig('parameter setting','swdebuglog'))
# config.read(os.path.join(base_dir,'setting','setting.conf'))
filename=base_dir
for i in test.getConfig('parameter setting','csvfilepath')[2:].split('/'):
    filename=os.path.join(filename,i)
print(filename)
OpenExcitation= "External" if bool(int(test.getConfig('parameter setting','OpenExcitation'))) else "Internal"

with open(filename,'rt',encoding='UTF-8') as f:
    rowdata=reader(f,delimiter=',')
    next(rowdata)
    Frequency_Range=[]
    even_freq=[]
    for i in rowdata:
        Frequency_Range.append(float(i[0]))
        even_freq.append(float(i[1]))

# set odd and even cells frequency
# e.g.1
# odd_freq_rang = Frequency_Range
# even_freq_rang = [x*0.8 for x in Frequency_Range]
# e.g.2
# odd_freq_rang = Frequency_Range
# even_freq_rang = Frequency_Range[1:] + Frequency_Range[0:1]
# e.g.3
# or self-define
# end of e.g.

if not zm_freq_set:
    odd_freq_rang = Frequency_Range
    even_freq_rang = even_freq

#############################################################################
# ----if no special requirment , pls don't change following source code---- #
#############################################################################

else:
    odd_freq_rang=Frequency_Range
    even_freq_rang=Frequency_Range


#spec_freq_lst = [7812.5, 7781.9824, 7751.4648, 7720.9473, 7690.4297, 7659.9121, 7629.3945, 7598.877, 7568.3594, 7537.8418, 7507.3242, 7476.8066, 7446.2891, 7415.7715, 7385.2539, 7354.7363, 7324.2188, 7293.7012, 7263.1836, 7232.666, 7202.1484, 7171.6309, 7141.1133, 7110.5957, 7080.0781, 7049.5605, 7019.043, 6988.5254, 6958.0078, 6927.4902, 6896.9727, 6866.4551, 6835.9375, 6805.4199, 6774.9023, 6744.3848, 6713.8672, 6683.3496, 6652.832, 6622.3145, 6591.7969, 6561.2793, 6530.7617, 6500.2441, 6469.7266, 6439.209, 6408.6914, 6378.1738, 6347.6563, 6317.1387, 6286.6211, 6256.1035, 6225.5859, 6195.0684, 6164.5508, 6134.0332, 6103.5156, 6072.998, 6042.4805, 6011.9629, 5981.4453, 5950.9277, 5920.4102, 5889.8926, 5859.375, 5828.8574, 5798.3398, 5767.8223, 5737.3047, 5706.7871, 5676.2695, 5645.752, 5615.2344, 5584.7168, 5554.1992, 5523.6816, 5493.1641, 5462.6465, 5432.1289, 5401.6113, 5371.0938, 5340.5762, 5310.0586, 5279.541, 5249.0234, 5218.5059, 5187.9883, 5157.4707, 5126.9531, 5096.4355, 5065.918, 5035.4004, 5004.8828, 4974.3652, 4943.8477, 4913.3301, 4882.8125, 4852.2949, 4821.7773, 4791.2598, 4760.7422, 4730.2246, 4699.707, 4669.1895, 4638.6719, 4608.1543, 4577.6367, 4547.1191, 4516.6016, 4486.084, 4455.5664, 4425.0488, 4394.5313, 4364.0137, 4333.4961, 4302.9785, 4272.4609, 4241.9434, 4211.4258, 4180.9082, 4150.3906, 4119.873, 4089.3555, 4058.8379, 4028.3203, 3997.8027, 3967.2852, 3936.7676, 3906.25, 3890.9912, 3875.7324, 3860.4736, 3845.2148, 3829.9561, 3814.6973, 3799.4385, 3784.1797, 3768.9209, 3753.6621, 3738.4033, 3723.1445, 3707.8857, 3692.627, 3677.3682, 3662.1094, 3646.8506, 3631.5918, 3616.333, 3601.0742, 3585.8154, 3570.5566, 3555.2979, 3540.0391, 3524.7803, 3509.5215, 3494.2627, 3479.0039, 3463.7451, 3448.4863, 3433.2275, 3417.9688, 3402.71, 3387.4512, 3372.1924, 3356.9336, 3341.6748, 3326.416, 3311.1572, 3295.8984, 3280.6396, 3265.3809, 3250.1221, 3234.8633, 3219.6045, 3204.3457, 3189.0869, 3173.8281, 3158.5693, 3143.3105, 3128.0518, 3112.793, 3097.5342, 3082.2754, 3067.0166, 3051.7578, 3036.499, 3021.2402, 3005.9814, 2990.7227, 2975.4639, 2960.2051, 2944.9463, 2929.6875, 2914.4287, 2899.1699, 2883.9111, 2868.6523, 2853.3936, 2838.1348, 2822.876, 2807.6172, 2792.3584, 2777.0996, 2761.8408, 2746.582, 2731.3232, 2716.0645, 2700.8057, 2685.5469, 2670.2881, 2655.0293, 2639.7705, 2624.5117, 2609.2529, 2593.9941, 2578.7354, 2563.4766, 2548.2178, 2532.959, 2517.7002, 2502.4414, 2487.1826, 2471.9238, 2456.665, 2441.4063, 2426.1475, 2410.8887, 2395.6299, 2380.3711, 2365.1123, 2349.8535, 2334.5947, 2319.3359, 2304.0771, 2288.8184, 2273.5596, 2258.3008, 2243.042, 2227.7832, 2212.5244, 2197.2656, 2182.0068, 2166.748, 2151.4893, 2136.2305, 2120.9717, 2105.7129, 2090.4541, 2075.1953, 2059.9365, 2044.6777, 2029.4189, 2014.1602, 1998.9014, 1983.6426, 1968.3838, 1953.125, 1945.4956, 1937.8662, 1930.2368, 1922.6074, 1914.978, 1907.3486, 1899.7192, 1892.0898, 1884.4604, 1876.8311, 1869.2017, 1861.5723, 1853.9429, 1846.3135, 1838.6841, 1831.0547, 1823.4253, 1815.7959, 1808.1665, 1800.5371, 1792.9077, 1785.2783, 1777.6489, 1770.0195, 1762.3901, 1754.7607, 1747.1313, 1739.502, 1731.8726, 1724.2432, 1716.6138, 1708.9844, 1701.355, 1693.7256, 1686.0962, 1678.4668, 1670.8374, 1663.208, 1655.5786, 1647.9492, 1640.3198, 1632.6904, 1625.061, 1617.4316, 1609.8022, 1602.1729, 1594.5435, 1586.9141, 1579.2847, 1571.6553, 1564.0259, 1556.3965, 1548.7671, 1541.1377, 1533.5083, 1525.8789, 1518.2495, 1510.6201, 1502.9907, 1495.3613, 1487.7319, 1480.1025, 1472.4731, 1464.8438, 1457.2144, 1449.585, 1441.9556, 1434.3262, 1426.6968, 1419.0674, 1411.438, 1403.8086, 1396.1792, 1388.5498, 1380.9204, 1373.291, 1365.6616, 1358.0322, 1350.4028, 1342.7734, 1335.144, 1327.5146, 1319.8853, 1312.2559, 1304.6265, 1296.9971, 1289.3677, 1281.7383, 1274.1089, 1266.4795, 1258.8501, 1251.2207, 1243.5913, 1235.9619, 1228.3325, 1220.7031, 1213.0737, 1205.4443, 1197.8149, 1190.1855, 1182.5562, 1174.9268, 1167.2974, 1159.668, 1152.0386, 1144.4092, 1136.7798, 1129.1504, 1121.521, 1113.8916, 1106.2622, 1098.6328, 1091.0034, 1083.374, 1075.7446, 1068.1152, 1060.4858, 1052.8564, 1045.2271, 1037.5977, 1029.9683, 1022.3389, 1014.7095, 1007.0801, 999.4507, 991.8213, 984.1919, 976.5625, 972.7478, 968.9331, 965.1184, 961.3037, 957.489, 953.6743, 949.8596, 946.0449, 942.2302, 938.4155, 934.6008, 930.7861, 926.9714, 923.1567, 919.342, 915.5273, 911.7126, 907.8979, 904.0833, 900.2686, 896.4539, 892.6392, 888.8245, 885.0098, 881.1951, 877.3804, 873.5657, 869.751, 865.9363, 862.1216, 858.3069, 854.4922, 850.6775, 846.8628, 843.0481, 839.2334, 835.4187, 831.604, 827.7893, 823.9746, 820.1599, 816.3452, 812.5305, 808.7158, 804.9011, 801.0864, 797.2717, 793.457, 789.6423, 785.8276, 782.0129, 778.1982, 774.3835, 770.5688, 766.7542, 762.9395, 759.1248, 755.3101, 751.4954, 747.6807, 743.866, 740.0513, 736.2366, 732.4219, 728.6072, 724.7925, 720.9778, 717.1631, 713.3484, 709.5337, 705.719, 701.9043, 698.0896, 694.2749, 690.4602, 686.6455, 682.8308, 679.0161, 675.2014, 671.3867, 667.572, 663.7573, 659.9426, 656.1279, 652.3132, 648.4985, 644.6838, 640.8691, 637.0544, 633.2397, 629.425, 625.6104, 621.7957, 617.981, 614.1663, 610.3516, 606.5369, 602.7222, 598.9075, 595.0928, 591.2781, 587.4634, 583.6487, 579.834, 576.0193, 572.2046, 568.3899, 564.5752, 560.7605, 556.9458, 553.1311, 549.3164, 545.5017, 541.687, 537.8723, 534.0576, 530.2429, 526.4282, 522.6135, 518.7988, 514.9841, 511.1694, 507.3547, 503.54, 499.7253, 495.9106, 492.0959, 488.2813, 486.3739, 484.4666, 482.5592, 480.6519, 478.7445, 476.8372, 474.9298, 473.0225, 471.1151, 469.2078, 467.3004, 465.3931, 463.4857, 461.5784, 459.671, 457.7637, 455.8563, 453.949, 452.0416, 450.1343, 448.2269, 446.3196, 444.4122, 442.5049, 440.5975, 438.6902, 436.7828, 434.8755, 432.9681, 431.0608, 429.1534, 427.2461, 425.3387, 423.4314, 421.524, 419.6167, 417.7094, 415.802, 413.8947, 411.9873, 410.08, 408.1726, 406.2653, 404.3579, 402.4506, 400.5432, 398.6359, 396.7285, 394.8212, 392.9138, 391.0065, 389.0991, 387.1918, 385.2844, 383.3771, 381.4697, 379.5624, 377.655, 375.7477, 373.8403, 371.933, 370.0256, 368.1183, 366.2109, 364.3036, 362.3962, 360.4889, 358.5815, 356.6742, 354.7668, 352.8595, 350.9521, 349.0448, 347.1375, 345.2301, 343.3228, 341.4154, 339.5081, 337.6007, 335.6934, 333.786, 331.8787, 329.9713, 328.064, 326.1566, 324.2493, 322.3419, 320.4346, 318.5272, 316.6199, 314.7125, 312.8052, 310.8978, 308.9905, 307.0831, 305.1758, 303.2684, 301.3611, 299.4537, 297.5464, 295.639, 293.7317, 291.8243, 289.917, 288.0096, 286.1023, 284.1949, 282.2876, 280.3802, 278.4729, 276.5656, 274.6582, 272.7509, 270.8435, 268.9362, 267.0288, 265.1215, 263.2141, 261.3068, 259.3994, 257.4921, 255.5847, 253.6774, 251.77, 249.8627, 247.9553, 246.048, 244.1406, 243.187, 242.2333, 241.2796, 240.3259, 239.3723, 238.4186, 237.4649, 236.5112, 235.5576, 234.6039, 233.6502, 232.6965, 231.7429, 230.7892, 229.8355, 228.8818, 227.9282, 226.9745, 226.0208, 225.0671, 224.1135, 223.1598, 222.2061, 221.2524, 220.2988, 219.3451, 218.3914, 217.4377, 216.4841, 215.5304, 214.5767, 213.623, 212.6694, 211.7157, 210.762, 209.8083, 208.8547, 207.901, 206.9473, 205.9937, 205.04, 204.0863, 203.1326, 202.179, 201.2253, 200.2716, 199.3179, 198.3643, 197.4106, 196.4569, 195.5032, 194.5496, 193.5959, 192.6422, 191.6885, 190.7349, 189.7812, 188.8275, 187.8738, 186.9202, 185.9665, 185.0128, 184.0591, 183.1055, 182.1518, 181.1981, 180.2444, 179.2908, 178.3371, 177.3834, 176.4297, 175.4761, 174.5224, 173.5687, 172.6151, 171.6614, 170.7077, 169.754, 168.8004, 167.8467, 166.893, 165.9393, 164.9857, 164.032, 163.0783, 162.1246, 161.171, 160.2173, 159.2636, 158.3099, 157.3563, 156.4026, 155.4489, 154.4952, 153.5416, 152.5879, 151.6342, 150.6805, 149.7269, 148.7732, 147.8195, 146.8658, 145.9122, 144.9585, 144.0048, 143.0511, 142.0975, 141.1438, 140.1901, 139.2365, 138.2828, 137.3291, 136.3754, 135.4218, 134.4681, 133.5144, 132.5607, 131.6071, 130.6534, 129.6997, 128.746, 127.7924, 126.8387, 125.885, 124.9313, 123.9777, 123.024, 122.0703, 121.1166, 120.163, 119.2093, 118.2556, 117.3019, 116.3483, 115.3946, 114.4409, 113.4872, 112.5336, 111.5799, 110.6262, 109.6725, 108.7189, 107.7652, 106.8115, 105.8578, 104.9042, 103.9505, 102.9968, 102.0432, 101.0895, 100.1358, 99.1821, 98.2285, 97.2748, 96.3211, 95.3674, 94.4138, 93.4601, 92.5064, 91.5527, 90.5991, 89.6454, 88.6917, 87.738, 86.7844, 85.8307, 84.877, 83.9233, 82.9697, 82.016, 81.0623, 80.1086, 79.155, 78.2013, 77.2476, 76.2939, 75.3403, 74.3866, 73.4329, 72.4792, 71.5256, 70.5719, 69.6182, 68.6646, 67.7109, 66.7572, 65.8035, 64.8499, 63.8962, 62.9425, 61.9888, 61.0352, 60.0815, 59.1278, 58.1741, 57.2205, 56.2668, 55.3131, 54.3594, 53.4058, 52.4521, 51.4984, 50.5447, 49.5911, 48.6374, 47.6837, 46.73, 45.7764, 44.8227, 43.869, 42.9153, 41.9617, 41.008, 40.0543, 39.1006, 38.147, 37.1933, 36.2396, 35.2859, 34.3323, 33.3786, 32.4249, 31.4713, 30.5176, 29.5639, 28.6102, 27.6566, 26.7029, 25.7492, 24.7955, 23.8419, 22.8882, 21.9345, 20.9808, 20.0272, 19.0735, 18.1198, 17.1661, 16.2125, 15.2588, 14.3051, 13.3514, 12.3978, 11.4441, 10.4904, 9.5367, 8.5831, 7.6294, 6.6757, 5.722, 4.7684, 3.8147, 2.861, 1.9073, 0.9537, 0.4768, 0.2384, 0.1192, 0.0596, 0.0298, 0.0149, 0.0075]
# spec_freq_lst=[7812.5203, 7751.485, 7690.4497, 7629.4144, 7568.3791, 7507.3438, 7446.3085, 7385.2731, 7324.2378, 7263.2025, 7202.1672, 7141.1319, 7080.0966, 7019.0612, 6958.0259, 6896.9906, 6835.9553, 6774.92, 6713.8847, 6652.8494, 6591.814, 6530.7787, 6469.7434, 6408.7081, 6347.6728, 6286.6375, 6225.6022, 6164.5668, 6103.5315, 6042.4962, 5981.4609, 5920.4256, 5859.3903, 5798.3549, 5737.3196, 5676.2843, 5615.249, 5554.2137, 5493.1784, 5432.1431, 5371.1077, 5310.0724, 5249.0371, 5188.0018, 5126.9665, 5065.9312, 5004.8958, 4943.8605, 4882.8252, 4821.7899, 4760.7546, 4699.7193, 4638.684, 4577.6486, 4516.6133, 4455.578, 4394.5427, 4333.5074, 4272.4721, 4211.4367, 4150.4014, 4089.3661, 4028.3308, 3967.2955, 3906.2602, 3875.7425, 3845.2249, 3814.7072, 3784.1895, 3753.6719, 3723.1542, 3692.6366, 3662.1189, 3631.6013, 3601.0836, 3570.5659, 3540.0483, 3509.5306, 3479.013, 3448.4953, 3417.9777, 3387.46, 3356.9423, 3326.4247, 3295.907, 3265.3894, 3234.8717, 3204.354, 3173.8364, 3143.3187, 3112.8011, 3082.2834, 3051.7658, 3021.2481, 2990.7304, 2960.2128, 2929.6951, 2899.1775, 2868.6598, 2838.1422, 2807.6245, 2777.1068, 2746.5892, 2716.0715, 2685.5539, 2655.0362, 2624.5186, 2594.0009, 2563.4832, 2532.9656, 2502.4479, 2471.9303, 2441.4126, 2410.895, 2380.3773, 2349.8596, 2319.342, 2288.8243, 2258.3067, 2227.789, 2197.2713, 2166.7537, 2136.236, 2105.7184, 2075.2007, 2044.6831, 2014.1654, 1983.6477, 1953.1301, 1937.8713, 1922.6124, 1907.3536, 1892.0948, 1876.8359, 1861.5771, 1846.3183, 1831.0595, 1815.8006, 1800.5418, 1785.283, 1770.0241, 1754.7653, 1739.5065, 1724.2477, 1708.9888, 1693.73, 1678.4712, 1663.2123, 1647.9535, 1632.6947, 1617.4359, 1602.177, 1586.9182, 1571.6594, 1556.4005, 1541.1417, 1525.8829, 1510.6241, 1495.3652, 1480.1064, 1464.8476, 1449.5887, 1434.3299, 1419.0711, 1403.8122, 1388.5534, 1373.2946, 1358.0358, 1342.7769, 1327.5181, 1312.2593, 1297.0004, 1281.7416, 1266.4828, 1251.224, 1235.9651, 1220.7063, 1205.4475, 1190.1886, 1174.9298, 1159.671, 1144.4122, 1129.1533, 1113.8945, 1098.6357, 1083.3768, 1068.118, 1052.8592, 1037.6004, 1022.3415, 1007.0827, 991.8239, 976.565, 968.9356, 961.3062, 953.6768, 946.0474, 938.418, 930.7886, 923.1591, 915.5297, 907.9003, 900.2709, 892.6415, 885.0121, 877.3827, 869.7532, 862.1238, 854.4944, 846.865, 839.2356, 831.6062, 823.9768, 816.3473, 808.7179, 801.0885, 793.4591, 785.8297, 778.2003, 770.5709, 762.9414, 755.312, 747.6826, 740.0532, 732.4238, 724.7944, 717.165, 709.5355, 701.9061, 694.2767, 686.6473, 679.0179, 671.3885, 663.7591, 656.1296, 648.5002, 640.8708, 633.2414, 625.612, 617.9826, 610.3532, 602.7237, 595.0943, 587.4649, 579.8355, 572.2061, 564.5767, 556.9473, 549.3178, 541.6884, 534.059, 526.4296, 518.8002, 511.1708, 503.5414, 495.9119, 488.2825, 484.4678, 480.6531, 476.8384, 473.0237, 469.209, 465.3943, 461.5796, 457.7649, 453.9502, 450.1354, 446.3207, 442.506, 438.6913, 434.8766, 431.0619, 427.2472, 423.4325, 419.6178, 415.8031, 411.9884, 408.1737, 404.359, 400.5443, 396.7295, 392.9148, 389.1001, 385.2854, 381.4707, 377.656, 373.8413, 370.0266, 366.2119, 362.3972, 358.5825, 354.7678, 350.9531, 347.1384, 343.3236, 339.5089, 335.6942, 331.8795, 328.0648, 324.2501, 320.4354, 316.6207, 312.806, 308.9913, 305.1766, 301.3619, 297.5472, 293.7325, 289.9177, 286.103, 282.2883, 278.4736, 274.6589, 270.8442, 267.0295, 263.2148, 259.4001, 255.5854, 251.7707, 247.956, 244.1413, 242.2339, 240.3266, 238.4192, 236.5118, 234.6045, 232.6971, 230.7898, 228.8824, 226.9751, 225.0677, 223.1604, 221.253, 219.3457, 217.4383, 215.531, 213.6236, 211.7162, 209.8089, 207.9015, 205.9942, 204.0868, 202.1795, 200.2721, 198.3648, 196.4574, 194.5501, 192.6427, 190.7354, 188.828, 186.9207, 185.0133, 183.1059, 181.1986, 179.2912, 177.3839, 175.4765, 173.5692, 171.6618, 169.7545, 167.8471, 165.9398, 164.0324, 162.1251, 160.2177, 158.3103, 156.403, 154.4956, 152.5883, 150.6809, 148.7736, 146.8662, 144.9589, 143.0515, 141.1442, 139.2368, 137.3295, 135.4221, 133.5148, 131.6074, 129.7, 127.7927, 125.8853, 123.978, 122.0706, 120.1633, 118.2559, 116.3486, 114.4412, 112.5339, 110.6265, 108.7192, 106.8118, 104.9044, 102.9971, 101.0897, 99.1824, 97.275, 95.3677, 93.4603, 91.553, 89.6456, 87.7383, 85.8309, 83.9236, 82.0162, 80.1089, 78.2015, 76.2941, 74.3868, 72.4794, 70.5721, 68.6647, 66.7574, 64.85, 62.9427, 61.0353, 59.128, 57.2206, 55.3133, 53.4059, 51.4985, 49.5912, 47.6838, 45.7765, 43.8691, 41.9618, 40.0544, 38.1471, 36.2397, 34.3324, 32.425, 30.5177, 28.6103, 26.703, 24.7956, 22.8882, 20.9809, 19.0735, 17.1662, 15.2588, 13.3515, 11.4441, 9.5368, 7.6294, 5.7221, 3.8147, 1.9074, 0.4768, 0.2384, 0.1192, 0.0596, 0.0298, 0.0149]
lfns_off_list=[7812.5203, 7782.0027, 7751.485, 7720.9674, 7690.4497, 7659.9321, 7629.4144, 7598.8967, 7568.3791, 7537.8614, 7507.3438, 7476.8261, 7446.3085, 7415.7908, 7385.2731, 7354.7555, 7324.2378, 7293.7202, 7263.2025, 7232.6849, 7202.1672, 7171.6495, 7141.1319, 7110.6142, 7080.0966, 7049.5789, 7019.0612, 6988.5436, 6958.0259, 6927.5083, 6896.9906, 6866.473, 6835.9553, 6805.4376, 6774.92, 6744.4023, 6713.8847, 6683.367, 6652.8494, 6622.3317, 6591.814, 6561.2964, 6530.7787, 6500.2611, 6469.7434, 6439.2258, 6408.7081, 6378.1904, 6347.6728, 6317.1551, 6286.6375, 6256.1198, 6225.6022, 6195.0845, 6164.5668, 6134.0492, 6103.5315, 6073.0139, 6042.4962, 6011.9785, 5981.4609, 5950.9432, 5920.4256, 5889.9079, 5859.3903, 5828.8726, 5798.3549, 5767.8373, 5737.3196, 5706.802, 5676.2843, 5645.7667, 5615.249, 5584.7313, 5554.2137, 5523.696, 5493.1784, 5462.6607, 5432.1431, 5401.6254, 5371.1077, 5340.5901, 5310.0724, 5279.5548, 5249.0371, 5218.5194, 5188.0018, 5157.4841, 5126.9665, 5096.4488, 5065.9312, 5035.4135, 5004.8958, 4974.3782, 4943.8605, 4913.3429, 4882.8252, 4852.3076, 4821.7899, 4791.2722, 4760.7546, 4730.2369, 4699.7193, 4669.2016, 4638.684, 4608.1663, 4577.6486, 4547.131, 4516.6133, 4486.0957, 4455.578, 4425.0604, 4394.5427, 4364.025, 4333.5074, 4302.9897, 4272.4721, 4241.9544, 4211.4367, 4180.9191, 4150.4014, 4119.8838, 4089.3661, 4058.8485, 4028.3308, 3997.8131, 3967.2955, 3936.7778, 3906.2602, 3891.0013, 3875.7425, 3860.4837, 3845.2249, 3829.966, 3814.7072, 3799.4484, 3784.1895, 3768.9307, 3753.6719, 3738.4131, 3723.1542, 3707.8954, 3692.6366, 3677.3777, 3662.1189, 3646.8601, 3631.6013, 3616.3424, 3601.0836, 3585.8248, 3570.5659, 3555.3071, 3540.0483, 3524.7895, 3509.5306, 3494.2718, 3479.013, 3463.7541, 3448.4953, 3433.2365, 3417.9777, 3402.7188, 3387.46, 3372.2012, 3356.9423, 3341.6835, 3326.4247, 3311.1658, 3295.907, 3280.6482, 3265.3894, 3250.1305, 3234.8717, 3219.6129, 3204.354, 3189.0952, 3173.8364, 3158.5776, 3143.3187, 3128.0599, 3112.8011, 3097.5422, 3082.2834, 3067.0246, 3051.7658, 3036.5069, 3021.2481, 3005.9893, 2990.7304, 2975.4716, 2960.2128, 2944.954, 2929.6951, 2914.4363, 2899.1775, 2883.9186, 2868.6598, 2853.401, 2838.1422, 2822.8833, 2807.6245, 2792.3657, 2777.1068, 2761.848, 2746.5892, 2731.3304, 2716.0715, 2700.8127, 2685.5539, 2670.295, 2655.0362, 2639.7774, 2624.5186, 2609.2597, 2594.0009, 2578.7421, 2563.4832, 2548.2244, 2532.9656, 2517.7068, 2502.4479, 2487.1891, 2471.9303, 2456.6714, 2441.4126, 2426.1538, 2410.895, 2395.6361, 2380.3773, 2365.1185, 2349.8596, 2334.6008, 2319.342, 2304.0831, 2288.8243, 2273.5655, 2258.3067, 2243.0478, 2227.789, 2212.5302, 2197.2713, 2182.0125, 2166.7537, 2151.4949, 2136.236, 2120.9772, 2105.7184, 2090.4595, 2075.2007, 2059.9419, 2044.6831, 2029.4242, 2014.1654, 1998.9066, 1983.6477, 1968.3889, 1953.1301, 1945.5007, 1937.8713, 1930.2418, 1922.6124, 1914.983, 1907.3536, 1899.7242, 1892.0948, 1884.4654, 1876.8359, 1869.2065, 1861.5771, 1853.9477, 1846.3183, 1838.6889, 1831.0595, 1823.43, 1815.8006, 1808.1712, 1800.5418, 1792.9124, 1785.283, 1777.6536, 1770.0241, 1762.3947, 1754.7653, 1747.1359, 1739.5065, 1731.8771, 1724.2477, 1716.6182, 1708.9888, 1701.3594, 1693.73, 1686.1006, 1678.4712, 1670.8418, 1663.2123, 1655.5829, 1647.9535, 1640.3241, 1632.6947, 1625.0653, 1617.4359, 1609.8064, 1602.177, 1594.5476, 1586.9182, 1579.2888, 1571.6594, 1564.03, 1556.4005, 1548.7711, 1541.1417, 1533.5123, 1525.8829, 1518.2535, 1510.6241, 1502.9946, 1495.3652, 1487.7358, 1480.1064, 1472.477, 1464.8476, 1457.2182, 1449.5887, 1441.9593, 1434.3299, 1426.7005, 1419.0711, 1411.4417, 1403.8122, 1396.1828, 1388.5534, 1380.924, 1373.2946, 1365.6652, 1358.0358, 1350.4063, 1342.7769, 1335.1475, 1327.5181, 1319.8887, 1312.2593, 1304.6299, 1297.0004, 1289.371, 1281.7416, 1274.1122, 1266.4828, 1258.8534, 1251.224, 1243.5945, 1235.9651, 1228.3357, 1220.7063, 1213.0769, 1205.4475, 1197.8181, 1190.1886, 1182.5592, 1174.9298, 1167.3004, 1159.671, 1152.0416, 1144.4122, 1136.7827, 1129.1533, 1121.5239, 1113.8945, 1106.2651, 1098.6357, 1091.0063, 1083.3768, 1075.7474, 1068.118, 1060.4886, 1052.8592, 1045.2298, 1037.6004, 1029.9709, 1022.3415, 1014.7121, 1007.0827, 999.4533, 991.8239, 984.1945, 976.565, 972.7503, 968.9356, 965.1209, 961.3062, 957.4915, 953.6768, 949.8621, 946.0474, 942.2327, 938.418, 934.6033, 930.7886, 926.9738, 923.1591, 919.3444, 915.5297, 911.715, 907.9003, 904.0856, 900.2709, 896.4562, 892.6415, 888.8268, 885.0121, 881.1974, 877.3827, 873.5679, 869.7532, 865.9385, 862.1238, 858.3091, 854.4944, 850.6797, 846.865, 843.0503, 839.2356, 835.4209, 831.6062, 827.7915, 823.9768, 820.162, 816.3473, 812.5326, 808.7179, 804.9032, 801.0885, 797.2738, 793.4591, 789.6444, 785.8297, 782.015, 778.2003, 774.3856, 770.5709, 766.7561, 762.9414, 759.1267, 755.312, 751.4973, 747.6826, 743.8679, 740.0532, 736.2385, 732.4238, 728.6091, 724.7944, 720.9797, 717.165, 713.3502, 709.5355, 705.7208, 701.9061, 698.0914, 694.2767, 690.462, 686.6473, 682.8326, 679.0179, 675.2032, 671.3885, 667.5738, 663.7591, 659.9443, 656.1296, 652.3149, 648.5002, 644.6855, 640.8708, 637.0561, 633.2414, 629.4267, 625.612, 621.7973, 617.9826, 614.1679, 610.3532, 606.5384, 602.7237, 598.909, 595.0943, 591.2796, 587.4649, 583.6502, 579.8355, 576.0208, 572.2061, 568.3914, 564.5767, 560.762, 556.9473, 553.1325, 549.3178, 545.5031, 541.6884, 537.8737, 534.059, 530.2443, 526.4296, 522.6149, 518.8002, 514.9855, 511.1708, 507.3561, 503.5414, 499.7266, 495.9119, 492.0972, 488.2825, 486.3752, 484.4678, 482.5605, 480.6531, 478.7458, 476.8384, 474.931, 473.0237, 471.1163, 469.209, 467.3016, 465.3943, 463.4869, 461.5796, 459.6722, 457.7649, 455.8575, 453.9502, 452.0428, 450.1354, 448.2281, 446.3207, 444.4134, 442.506, 440.5987, 438.6913, 436.784, 434.8766, 432.9693, 431.0619, 429.1546, 427.2472, 425.3399, 423.4325, 421.5251, 419.6178, 417.7104, 415.8031, 413.8957, 411.9884, 410.081, 408.1737, 406.2663, 404.359, 402.4516, 400.5443, 398.6369, 396.7295, 394.8222, 392.9148, 391.0075, 389.1001, 387.1928, 385.2854, 383.3781, 381.4707, 379.5634, 377.656, 375.7487, 373.8413, 371.934, 370.0266, 368.1192, 366.2119, 364.3045, 362.3972, 360.4898, 358.5825, 356.6751, 354.7678, 352.8604, 350.9531, 349.0457, 347.1384, 345.231, 343.3236, 341.4163, 339.5089, 337.6016, 335.6942, 333.7869, 331.8795, 329.9722, 328.0648, 326.1575, 324.2501, 322.3428, 320.4354, 318.5281, 316.6207, 314.7133, 312.806, 310.8986, 308.9913, 307.0839, 305.1766, 303.2692, 301.3619, 299.4545, 297.5472, 295.6398, 293.7325, 291.8251, 289.9177, 288.0104, 286.103, 284.1957, 282.2883, 280.381, 278.4736, 276.5663, 274.6589, 272.7516, 270.8442, 268.9369, 267.0295, 265.1222, 263.2148, 261.3074, 259.4001, 257.4927, 255.5854, 253.678, 251.7707, 249.8633, 247.956, 246.0486, 244.1413, 243.1876, 242.2339, 241.2802, 240.3266, 239.3729, 238.4192, 237.4655, 236.5118, 235.5582, 234.6045, 233.6508, 232.6971, 231.7435, 230.7898, 229.8361, 228.8824, 227.9288, 226.9751, 226.0214, 225.0677, 224.114, 223.1604, 222.2067, 221.253, 220.2993, 219.3457, 218.392, 217.4383, 216.4846, 215.531, 214.5773, 213.6236, 212.6699, 211.7162, 210.7626, 209.8089, 208.8552, 207.9015, 206.9479, 205.9942, 205.0405, 204.0868, 203.1332, 202.1795, 201.2258, 200.2721, 199.3185, 198.3648, 197.4111, 196.4574, 195.5037, 194.5501, 193.5964, 192.6427, 191.689, 190.7354, 189.7817, 188.828, 187.8743, 186.9207, 185.967, 185.0133, 184.0596, 183.1059, 182.1523, 181.1986, 180.2449, 179.2912, 178.3376, 177.3839, 176.4302, 175.4765, 174.5229, 173.5692, 172.6155, 171.6618, 170.7081, 169.7545, 168.8008, 167.8471, 166.8934, 165.9398, 164.9861, 164.0324, 163.0787, 162.1251, 161.1714, 160.2177, 159.264, 158.3103, 157.3567, 156.403, 155.4493, 154.4956, 153.542, 152.5883, 151.6346, 150.6809, 149.7273, 148.7736, 147.8199, 146.8662, 145.9126, 144.9589, 144.0052, 143.0515, 142.0978, 141.1442, 140.1905, 139.2368, 138.2831, 137.3295, 136.3758, 135.4221, 134.4684, 133.5148, 132.5611, 131.6074, 130.6537, 129.7, 128.7464, 127.7927, 126.839, 125.8853, 124.9317, 123.978, 123.0243, 122.0706, 121.117, 120.1633, 119.2096, 118.2559, 117.3022, 116.3486, 115.3949, 114.4412, 113.4875, 112.5339, 111.5802, 110.6265, 109.6728, 108.7192, 107.7655, 106.8118, 105.8581, 104.9044, 103.9508, 102.9971, 102.0434, 101.0897, 100.1361, 99.1824, 98.2287, 97.275, 96.3214, 95.3677, 94.414, 93.4603, 92.5066, 91.553, 90.5993, 89.6456, 88.6919, 87.7383, 86.7846, 85.8309, 84.8772, 83.9236, 82.9699, 82.0162, 81.0625, 80.1089, 79.1552, 78.2015, 77.2478, 76.2941, 75.3405, 74.3868, 73.4331, 72.4794, 71.5258, 70.5721, 69.6184, 68.6647, 67.7111, 66.7574, 65.8037, 64.85, 63.8963, 62.9427, 61.989, 61.0353, 60.0816, 59.128, 58.1743, 57.2206, 56.2669, 55.3133, 54.3596, 53.4059, 52.4522, 51.4985, 50.5449, 49.5912, 48.6375, 47.6838, 46.7302, 45.7765, 44.8228, 43.8691, 42.9155, 41.9618, 41.0081, 40.0544, 39.1007, 38.1471, 37.1934, 36.2397, 35.286, 34.3324, 33.3787, 32.425, 31.4713, 30.5177, 29.564, 28.6103, 27.6566, 26.703, 25.7493, 24.7956, 23.8419, 22.8882, 21.9346, 20.9809, 20.0272, 19.0735, 18.1199, 17.1662, 16.2125, 15.2588, 14.3052, 13.3515, 12.3978, 11.4441, 10.4904, 9.5368, 8.5831, 7.6294, 6.6757, 5.7221, 4.7684, 3.8147, 2.861, 1.9074, 0.9537, 0.4768, 0.2384, 0.1192, 0.0596, 0.0298, 0.0149, 0.0075]
lfns_on_list=[7812.5203, 7751.485, 7690.4497, 7629.4144, 7568.3791, 7507.3438, 7446.3085, 7385.2731, 7324.2378, 7263.2025, 7202.1672, 7141.1319, 7080.0966, 7019.0612, 6958.0259, 6896.9906, 6835.9553, 6774.92, 6713.8847, 6652.8494, 6591.814, 6530.7787, 6469.7434, 6408.7081, 6347.6728, 6286.6375, 6225.6022, 6164.5668, 6103.5315, 6042.4962, 5981.4609, 5920.4256, 5859.3903, 5798.3549, 5737.3196, 5676.2843, 5615.249, 5554.2137, 5493.1784, 5432.1431, 5371.1077, 5310.0724, 5249.0371, 5188.0018, 5126.9665, 5065.9312, 5004.8958, 4943.8605, 4882.8252, 4821.7899, 4760.7546, 4699.7193, 4638.684, 4577.6486, 4516.6133, 4455.578, 4394.5427, 4333.5074, 4272.4721, 4211.4367, 4150.4014, 4089.3661, 4028.3308, 3967.2955, 3906.2602, 3875.7425, 3845.2249, 3814.7072, 3784.1895, 3753.6719, 3723.1542, 3692.6366, 3662.1189, 3631.6013, 3601.0836, 3570.5659, 3540.0483, 3509.5306, 3479.013, 3448.4953, 3417.9777, 3387.46, 3356.9423, 3326.4247, 3295.907, 3265.3894, 3234.8717, 3204.354, 3173.8364, 3143.3187, 3112.8011, 3082.2834, 3051.7658, 3021.2481, 2990.7304, 2960.2128, 2929.6951, 2899.1775, 2868.6598, 2838.1422, 2807.6245, 2777.1068, 2746.5892, 2716.0715, 2685.5539, 2655.0362, 2624.5186, 2594.0009, 2563.4832, 2532.9656, 2502.4479, 2471.9303, 2441.4126, 2410.895, 2380.3773, 2349.8596, 2319.342, 2288.8243, 2258.3067, 2227.789, 2197.2713, 2166.7537, 2136.236, 2105.7184, 2075.2007, 2044.6831, 2014.1654, 1983.6477, 1953.1301, 1937.8713, 1922.6124, 1907.3536, 1892.0948, 1876.8359, 1861.5771, 1846.3183, 1831.0595, 1815.8006, 1800.5418, 1785.283, 1770.0241, 1754.7653, 1739.5065, 1724.2477, 1708.9888, 1693.73, 1678.4712, 1663.2123, 1647.9535, 1632.6947, 1617.4359, 1602.177, 1586.9182, 1571.6594, 1556.4005, 1541.1417, 1525.8829, 1510.6241, 1495.3652, 1480.1064, 1464.8476, 1449.5887, 1434.3299, 1419.0711, 1403.8122, 1388.5534, 1373.2946, 1358.0358, 1342.7769, 1327.5181, 1312.2593, 1297.0004, 1281.7416, 1266.4828, 1251.224, 1235.9651, 1220.7063, 1205.4475, 1190.1886, 1174.9298, 1159.671, 1144.4122, 1129.1533, 1113.8945, 1098.6357, 1083.3768, 1068.118, 1052.8592, 1037.6004, 1022.3415, 1007.0827, 991.8239, 976.565, 968.9356, 961.3062, 953.6768, 946.0474, 938.418, 930.7886, 923.1591, 915.5297, 907.9003, 900.2709, 892.6415, 885.0121, 877.3827, 869.7532, 862.1238, 854.4944, 846.865, 839.2356, 831.6062, 823.9768, 816.3473, 808.7179, 801.0885, 793.4591, 785.8297, 778.2003, 770.5709, 762.9414, 755.312, 747.6826, 740.0532, 732.4238, 724.7944, 717.165, 709.5355, 701.9061, 694.2767, 686.6473, 679.0179, 671.3885, 663.7591, 656.1296, 648.5002, 640.8708, 633.2414, 625.612, 617.9826, 610.3532, 602.7237, 595.0943, 587.4649, 579.8355, 572.2061, 564.5767, 556.9473, 549.3178, 541.6884, 534.059, 526.4296, 518.8002, 511.1708, 503.5414, 495.9119, 488.2825, 484.4678, 480.6531, 476.8384, 473.0237, 469.209, 465.3943, 461.5796, 457.7649, 453.9502, 450.1354, 446.3207, 442.506, 438.6913, 434.8766, 431.0619, 427.2472, 423.4325, 419.6178, 415.8031, 411.9884, 408.1737, 404.359, 400.5443, 396.7295, 392.9148, 389.1001, 385.2854, 381.4707, 377.656, 373.8413, 370.0266, 366.2119, 362.3972, 358.5825, 354.7678, 350.9531, 347.1384, 343.3236, 339.5089, 335.6942, 331.8795, 328.0648, 324.2501, 320.4354, 316.6207, 312.806, 308.9913, 305.1766, 301.3619, 297.5472, 293.7325, 289.9177, 286.103, 282.2883, 278.4736, 274.6589, 270.8442, 267.0295, 263.2148, 259.4001, 255.5854, 251.7707, 247.956, 244.1413, 242.2339, 240.3266, 238.4192, 236.5118, 234.6045, 232.6971, 230.7898, 228.8824, 226.9751, 225.0677, 223.1604, 221.253, 219.3457, 217.4383, 215.531, 213.6236, 211.7162, 209.8089, 207.9015, 205.9942, 204.0868, 202.1795, 200.2721, 198.3648, 196.4574, 194.5501, 192.6427, 190.7354, 188.828, 186.9207, 185.0133, 183.1059, 181.1986, 179.2912, 177.3839, 175.4765, 173.5692, 171.6618, 169.7545, 167.8471, 165.9398, 164.0324, 162.1251, 160.2177, 158.3103, 156.403, 154.4956, 152.5883, 150.6809, 148.7736, 146.8662, 144.9589, 143.0515, 141.1442, 139.2368, 137.3295, 135.4221, 133.5148, 131.6074, 129.7, 127.7927, 125.8853, 123.978, 122.0706, 120.1633, 118.2559, 116.3486, 114.4412, 112.5339, 110.6265, 108.7192, 106.8118, 104.9044, 102.9971, 101.0897, 99.1824, 97.275, 95.3677, 93.4603, 91.553, 89.6456, 87.7383, 85.8309, 83.9236, 82.0162, 80.1089, 78.2015, 76.2941, 74.3868, 72.4794, 70.5721, 68.6647, 66.7574, 64.85, 62.9427, 61.0353, 59.128, 57.2206, 55.3133, 53.4059, 51.4985, 49.5912, 47.6838, 45.7765, 43.8691, 41.9618, 40.0544, 38.1471, 36.2397, 34.3324, 32.425, 30.5177, 28.6103, 26.703, 24.7956, 22.8882, 20.9809, 19.0735, 17.1662, 15.2588, 13.3515, 11.4441, 9.5368, 7.6294, 5.7221, 3.8147, 1.9074, 0.9537, 0.4768, 0.2384, 0.1192, 0.0596, 0.0298, 0.0149]

spec_freq_lst=lfns_on_list if LFNS=="Enable" else lfns_on_list
spec_freq_len=len(spec_freq_lst)

pltcolor=["b","g","r","c","y","k"]
pltxminum=0.7
pltxmaxum=0.8
pltyminum=-0.3
pltymaxum=0

def getlength(num):
    length = 0
    while num != 0:
        length += 1
        num = num // 2
    return length
def getzerobitnum(num):
    count=0
    while num&0x1==0:
        count+=1
        num>>=1
    return count
def getspecfreq(freq):
    look_up_num_lo = 0
    look_up_num_hi = spec_freq_len - 1
    look_up_num=0
    while look_up_num_lo < look_up_num_hi - 1:
        look_up_num = int((look_up_num_lo + look_up_num_hi) / 2)
        if freq < spec_freq_lst[look_up_num]:
            look_up_num_lo = look_up_num
        else:
            look_up_num_hi = look_up_num
    delta_lo = abs(freq - spec_freq_lst[look_up_num_lo])
    delta_hi = abs(freq - spec_freq_lst[look_up_num_hi])
    if delta_lo < delta_hi:
        look_up_num = look_up_num_lo
    else:
        look_up_num = look_up_num_hi
    return spec_freq_lst[look_up_num]

# input  expect freq ; LFNS defult Disable
# return mantissa,exponent,real freq
def getmantandexp(freq,LFNS="Disable"):
    if freq> 7812.5:
        freq=7812.5
    freqlsb = 7.4506  # mHz
    exp = getlength(int(freq * 1000 / freqlsb / 0xff))
    manti = int(freq * 1000 / freqlsb / 2 ** exp + 0.5)
    for count in range(0, 0xf, 1):
        if manti & 0x1: break
        if exp >= 15: break
        manti >>= 1
        exp += 1
    if LFNS == "Enable" and manti & 0x1:
        if manti > 127:
            manti&=0xfe
        elif exp:
            manti <<= 1
            exp -= 1
        else :
            manti = manti & 0xfe if manti & 0xfe else 2
    tmp=getzerobitnum(manti)-1
    if tmp>0 and exp!=0xf:
        manti >>= tmp
        exp+=tmp
    realfreq= manti * freqlsb * 2 ** exp / 1000
    return manti, exp, realfreq
chain1=None
# calucate the real and image value
def cal_real_image_value(vreal_vimage_list,vzm_list,oddfreq_real,evenfreq_real):
    #try:
    if 1:
        if not vreal_vimage_list or not vzm_list  or not oddfreq_real or not evenfreq_real:
            return -1
        cal_zm_real=[]
        cal_zm_imag=[]
        Vreal_value_list=[]
        Vimag_value_list=[]
        for i in range(1,chain1.linx_num,1):
            freq_real= oddfreq_real if i&0x1 else evenfreq_real
            Vreal_value=1000*vreal_vimage_list[0][0][i]/(
                    (math.sin(3.1415926 * freq_real / 62500) / (3.1415926 * freq_real / 62500)) ** 2)
            Vimag_value= 1000 * vreal_vimage_list[1][0][i] / (
                    (math.sin(3.1415926 * freq_real / 62500) / (3.1415926 * freq_real / 62500)) ** 2)
            VZM_value = vzm_list[0][i]
            Zreal = (3.14159126 / 1.41421) * Vreal_value * Rext / VZM_value / 1000
            Zimag = -(3.14159126 / 1.41421) * Vimag_value * Rext / VZM_value / 1000
            cal_zm_real.append(Zreal)
            cal_zm_imag.append(Zimag)
            Vreal_value_list.append(Vreal_value)
            Vimag_value_list.append(Vimag_value)
        return cal_zm_real,cal_zm_imag ,Vreal_value_list ,Vimag_value_list
    #except:
        #print("error cal_real_image_value")
def cal_frequency_list(odd_freq_rang,even_freq_rang):
    odd_Mant_list=[]
    odd_Exp_list=[]
    odd_freq_real_list=[]
    even_Mant_list=[]
    even_Exp_list=[]
    even_freq_real_list=[]
    for fc in range(len(odd_freq_rang)):
        if set_specfic_freq:
            odd_freq_rang[fc] = getspecfreq(odd_freq_rang[fc])
            even_freq_rang[fc] = getspecfreq(even_freq_rang[fc])
        odd_freq_list = getmantandexp(odd_freq_rang[fc], LFNS=LFNS)
        odd_Mant_list.append(odd_freq_list[0])
        odd_Exp_list.append(odd_freq_list[1])
        odd_freq_real_list.append(odd_freq_list[2])

        even_freq_list = getmantandexp(even_freq_rang[fc], LFNS=LFNS)
        even_Mant_list.append(even_freq_list[0])
        even_Exp_list.append(even_freq_list[1])
        even_freq_real_list.append(even_freq_list[2])
    return odd_Mant_list,odd_Exp_list,odd_freq_real_list,even_Mant_list,even_Exp_list,even_freq_real_list
class outofloop(RuntimeError):
    pass

def ZM():
    if test.init()== False:
        return
    powerChannel = int(test.getConfig("test case setting","powerChannel"))
    test.ps.config(ch=powerChannel,voltage=3700,current=3000,voltlimit=30000,currlimit=3100) if test.ps != None else None
    test.ps.on(ch=powerChannel) if test.ps != None else None
    test.cnt.config(mode="frequency") if test.cnt != None else None
    global chain1
    ser = test.pcSer
    chain1 = test.pc
    ser.tx("cc 0\n",delay=0.1)
    ser.tx("sdc 1\n",delay=0.1)
    ser.tx("sdp 10000\n",delay=0.1)
    ser.tx("slp 10000\n", delay=0.1)
    ser.tx("snp 10000\n", delay=0.1)
    ser.tx("ssp 10000\n", delay=0.1)
    ser.tx("stp 10000\n", delay=0.1)
    count = 0
    while chain1.linx_num<2:
        chain1.en()
        count += 1
        if count > 5:
            return False
    csv_file_name = os.path.join(base_dir,'Report', ReportName + "_%s.csv" %(time.strftime("%Y%m%d_%H%M%S", time.localtime())))
    fobj=open(csv_file_name,'a')
    fobj.writelines("%s\n" % "ZM deviation")
    fobj.writelines("Test Condition:%s\n" %ReportName)
    fobj.flush()

    while True:
        chain1.Initialise()
        ID = chain1.get_UniqueID()
        fobj.writelines("chip_id,testID,test,LFNS,Rext,Gain,Freq(Hz),FreqM(Hz),Tset(C),Vset(mV),Tm(C),Tg(C),Vm(V),Vg(V),Vzm(V),Zr(mohm),Zi(mohm),Vr(uV),Vi(uV),Vr_code,Vi_code,ZM_RSC,Time\n")
        fobj.flush()
        Cycles=CyclesNo
        setid=0
        if zm_mode_set == 0:
            setid = 0xff
        elif zm_mode_set == 1:
            setid = 0xfd
        elif zm_mode_set == 2:
            setid = 0xfe
        elif zm_mode_set ==3 and (test_id<0x02 or test_id >0xFC):
            print("pls check the test_id ")
            return
        elif zm_mode_set == 3:
            setid = test_id
        elif zm_mode_set == 4:
            Cycles *= 2
        elif zm_mode_set == 5:
            Cycles *= 2
        elif zm_mode_set == 6:
            Cycles *= (chain1.linx_num-1)
        else:
            print("zm_mode_set error %d" % (zm_mode_set))
            return
        frequency_list=cal_frequency_list(odd_freq_rang,even_freq_rang)
        test.oven.start() if test.oven != None else None
        for tempIDX, Tset in enumerate(test.ovenTempPoint if test.ovenTempInputMode == 0 else range(test.ovenTempPoint[0],test.ovenTempPoint[1],test.ovenTempPoint[2])):
            test.oven.setTemp(temp=Tset, delay=test.ovenDelayFirst if tempIDX == 0 else test.ovenDelayEach) if test.oven != None else None
            for voltIDX,Vset in enumerate([2500,3700,5500]):
                test.ps.config(ch=powerChannel,voltage=Vset,current=3000,voltlimit=30000,currlimit=3100) if test.ps != None else None
                time.sleep(5)
                ser.tx("RT FFF007D 2\n", delay=0.1)
                ser.tx("RT FF2FFFF 2\n", delay=0.1)
                ser.tx("RT FFF0000 2\n", delay=0.1)
                ser.tx("RT FFD0012\n", delay=0.1)
                ser.tx("RT FFAFFFF 2\n", delay=0.1)
                ser.tx("RT FFB0004 2\n", delay=0.1)
                for cycle in range(Cycles):
                    if cycle > 0:
                        time.sleep(CyclesDelay)
                    if zm_mode_set==4:
                        setid = 0xfd if not cycle&1 else 0xfe
                    elif zm_mode_set==5:
                        setid = 0xfe if not cycle&1 else 0xfd
                    elif zm_mode_set==6:
                        setid = (cycle//CyclesNo)+2
                    global LFNS
                    default_mantissa=0x1f
                    for gain in Gain_Range:
                        while not chain1.set_ZMFreq(ID=0xFF, winEn=LFNS, Exponent=0xf, Mantissa=default_mantissa):
                            continue
                        while not chain1.set_ZMCurr(ID=0xFF, enZM="Stop", enXCS="Internal", hiPass=gain):
                            continue
                        while not chain1.set_ZMCurr(ID=0xFF, enZM="Start", enXCS="Internal", hiPass=gain):
                            continue
                        while not chain1.set_ZMCurr(ID=setid, enZM="Start", enXCS=OpenExcitation, hiPass=gain):
                            continue
                        chain1.get_ZM(ID=0xFF, rstZMPh="Reset", clrExeCnt="NoReset", equidist="NoReset", resetRSC="ResetRSC")
                        if gain == '1x':
                            time.sleep(5)
                        else:
                            time.sleep(40)
                        zm_plotx = [0,0]
                        zm_ploty = [0,0]
            
                        for fc in range(len(Frequency_Range)):
                            zm_real_sumlist = [0] * (chain1.linx_num - 1)
                            zm_image_sumlist = [0] * (chain1.linx_num - 1)
                            if (gain=="16x" or gain=="4x") and (Frequency_Range[fc] < minumfreqgainx16): continue
                            # --find the specfic frequency--#

                            odd_Mant=frequency_list[0][fc]
                            odd_Exp=frequency_list[1][fc]
                            odd_freq_real=frequency_list[2][fc]

                            even_Mant = frequency_list[3][fc]
                            even_Exp = frequency_list[4][fc]
                            even_freq_real = frequency_list[5][fc]
                            # --find the specfic frequency-- #

                            # --set ZMFreq-- #
                            
                            while not chain1.set_ZMFreq(ID=0xfd, winEn=LFNS, Exponent=odd_Exp, Mantissa= odd_Mant):
                                continue
                            while not chain1.set_ZMFreq(ID=0xfe, winEn=LFNS, Exponent=even_Exp, Mantissa= even_Mant):
                                continue
                            chain1.get_ZM(ID=0xFF, rstZMPh="Reset", clrExeCnt="NoReset", equidist="NoReset",
                                          resetRSC="ResetRSC")
                            loop = 0
                            global getrsc0flag
                            getrsc0=getrsc0flag
                            rsc0flag=0
                            rsc_start=0
                            rsc_stop=0
                            rsc_step=0
                            test_list=[0 for x in range(chain1.linx_num)]
                            if zm_mode_set == 3 or zm_mode_set==6:
                                rsc_start = setid - 1
                                rsc_stop = setid
                                rsc_step=1
                                test_list[rsc_start] = 1
                            elif zm_mode_set == 1:
                                rsc_start = 2
                                rsc_stop = chain1.linx_num
                                rsc_step = 2
                                test_list = [0 if x & 0x1 else 1 for x in range(chain1.linx_num)]
                            elif zm_mode_set == 2:
                                rsc_start = 1
                                rsc_stop = chain1.linx_num
                                rsc_step = 2
                                test_list = [1 if x & 0x1 else 0 for x in range(chain1.linx_num)]
                            elif zm_mode_set == 4:
                                rsc_start = 2 if not cycle & 1 else 1
                                rsc_stop = chain1.linx_num
                                rsc_step = 2
                                if not cycle & 1:
                                    test_list = [0 if x & 0x1 else 1 for x in range(chain1.linx_num)]
                                else:
                                    test_list = [1 if x & 0x1 else 0 for x in range(chain1.linx_num)]
                            elif zm_mode_set==5:
                                rsc_start = 1 if not cycle & 1 else 2
                                rsc_stop = chain1.linx_num
                                rsc_step = 2
                                if not cycle & 1:
                                    test_list = [1 if x & 0x1 else 0 for x in range(chain1.linx_num)]
                                else:
                                    test_list = [0 if x & 0x1 else 1 for x in range(chain1.linx_num)]
                            else:
                                rsc_start = 1
                                rsc_stop = chain1.linx_num
                                rsc_step = 1
                                test_list = [1 for x in range(chain1.linx_num)]
                            rsc0flag=0
                            getrsc0 = getrsc0flag
                            
                            while True:
                                # --delay to get the update data-- #
                                
                                if min(odd_Exp, even_Exp) > 6:
                                    timedelay=1.05
                                else:
                                    timedelay=1.05*2 ** (7 - min(odd_Exp, even_Exp))
                                #if timedelay >2:
                                # time.sleep(timedelay)
                                print("delay %d S ## gain %s ## odd freq %f Hz ## even freq %f Hz ## cycle %d ## loop %d"%(timedelay,gain,odd_freq_real,even_freq_real,cycle,loop))
                                # --get ZM result--#
                                while True:
                                    tmp_zm = chain1.get_ZM(rstZMPh="NoReset")
                                    if tmp_zm == None: continue
                                    if min(chain1.Ack[0]) != 8 and max(chain1.Ack[0]) != 12: continue
                                    #if max(chain1.Ack[0]) != 8:
                                        #if swdebuglog:
                                            #print("pending sr")

                                    realRSCcur=[chain1.ZrealRSCcur[0][rscindex] for rscindex in range(rsc_start, rsc_stop, rsc_step)]
                                    realRSCpre=[chain1.ZrealRSCpre[0][rscindex] for rscindex in range(rsc_start, rsc_stop, rsc_step)]
                                    imagRSCcur=[chain1.ZimagRSCcur[0][rscindex] for rscindex in range(rsc_start, rsc_stop, rsc_step)]
                                    imagRSCpre=[chain1.ZimagRSCcur[0][rscindex] for rscindex in range(rsc_start, rsc_stop, rsc_step)]
                                    #print(realRSCcur)
                                    if rsc0flag == 0:
                                        try:
                                            for tmp in realRSCcur:
                                                if tmp != 0:  # wait rsc0 data
                                                    raise outofloop()
                                            rsc0flag = 1
                                            if getrsc0 == 0:
                                                getrsc0 += 1
                                                raise outofloop()

                                        except outofloop:
                                            continue
                                    else:
                                        try:
                                            for tmp in realRSCcur:
                                                if tmp != realRSCcur[0]:
                                                    raise outofloop()
                                        except outofloop:
                                            if swdebuglog:
                                                print("wait same rsc", chain1.ZrealRSCcur)
                                            continue
                                    tmp_VZM = chain1.get_VZM()
                                    if tmp_VZM == None : continue
                                    if swdebuglog:
                                        print("ZrealRSCcur=%s,%s" % (chain1.ZrealRSCcur, chain1.ZrealRSCpre))
                                        print("ZimagRSCcur=%s,%s" % (chain1.ZimagRSCcur, chain1.ZimagRSCpre))
                                        print("VZMRSCcur=%s,%s"%(chain1.VZMRSCcur,chain1.VZMRSCpre))
                                    # --compare the RSC value-- #
                                    if zm_mode_set==3 and (chain1.ZrealRSCcur[0][test_id-1]==chain1.ZrealRSCpre[0][test_id-1]):
                                        if swdebuglog:
                                            print(chain1.ZrealRSCcur, chain1.ZrealRSCpre)
                                            print("repeat Zreal RSC RECORD mode3")
                                        continue
                                    elif realRSCcur==realRSCpre:
                                        if swdebuglog:
                                            print(chain1.ZrealRSCcur, chain1.ZrealRSCpre)
                                            print("repeat Zreal RSC RECORD")
                                        continue

                                    if realRSCcur!=imagRSCcur:
                                        continue
                                    # if chain1.ZrealRSCcur!= chain1.VZMRSCcur:
                                        # continue
                                    # --calculate real and image impedance-- #
                                    zm_list=cal_real_image_value(vreal_vimage_list=tmp_zm,vzm_list=tmp_VZM,oddfreq_real=odd_freq_real,evenfreq_real=even_freq_real)
                                    Vreal_code_list=[]
                                    Vimag_code_list=[]
                                    for id in range(1,len(chain1.ZrealCode[0]),1):
                                        Vreal_code = "'%s" %chain1.ZrealCode[0][id]
                                        Vimag_code = "'%s" %chain1.ZimagCode[0][id]
                                        Vreal_code_list.append(Vreal_code)
                                        Vimag_code_list.append(Vimag_code)
                                    if zm_list!= None :break
                                for i in range(len(zm_real_sumlist)):
                                    zm_real_sumlist[i]+=zm_list[0][i]
                                    zm_image_sumlist[i]+=zm_list[1][i]
                                freqRead=test.cnt.readData()
                                # --get Vmain and Vguard value-- #
                                while True:
                                    tmp_main_list = chain1.get_Vmain(sampleRate=0)
                                    if tmp_main_list == None: continue
                                    if min(chain1.Ack[0]) != 8 and max(chain1.Ack[0]) != 12: continue
                                    tmp_guard_list = chain1.get_Vguard(sampleRate=0)
                                    if tmp_guard_list == None: continue
                                    else: break
                                # --get MainDTS dn GuardDTS value-- #
                                while True:
                                    tmp_Tm_list = chain1.get_MainDTS()
                                    if tmp_Tm_list == None: continue
                                    if min(chain1.Ack[0]) != 8 and max(chain1.Ack[0]) != 12: continue
                                    tmp_Tg_list = chain1.get_GuardDTS()
                                    if tmp_Tg_list == None: continue
                                    else: break
                                # --save data to excel file-- #
                                if gain == "1x":
                                    Loop_num = gainx1times
                                elif gain == "4x":
                                    Loop_num = gainx4times
                                else:
                                    Loop_num = gainx16times
                                Test_time = time.strftime("%H:%M:%S", time.localtime())
                                zm_real_strlist=['']*(chain1.linx_num-1)
                                zm_image_strlist=['']*(chain1.linx_num-1)

                                if loop== Loop_num-1:
                                    zm_real_strlist=[str(real/Loop_num) for real in zm_real_sumlist]
                                    zm_image_strlist = [str(image / Loop_num) for image in zm_image_sumlist]
                                    if zm_mode_set == 3:
                                        zm_plotx[0]=float(zm_real_strlist[setid-2]) if fc==0 else zm_plotx[1]
                                        zm_ploty[0]=float(zm_image_strlist[setid-2]) if fc==0 else zm_ploty[1]
                                        zm_plotx[1] = float(zm_real_strlist[setid-2])
                                        zm_ploty[1] = float(zm_image_strlist[setid-2])
                                        global pltymaxum,pltyminum,pltxminum,pltxmaxum
                                        for x in zm_plotx:
                                            if x<pltxminum+0.1:
                                                pltxminum=x-0.2
                                            if x > pltxmaxum-0.1:
                                                pltxmaxum=x+0.2
                                        for y in zm_ploty:
                                            if y<pltyminum+0.1:
                                                pltyminum=y-0.2
                                            if y>pltymaxum-0.1:
                                                pltymaxum=y+0.2
                                        plt.xlim(pltxminum,pltxmaxum)
                                        plt.ylim(pltyminum,pltymaxum)
                                        if Cycles==CyclesNo:
                                            plotc = pltcolor[cycle % (len(pltcolor) - 1)]
                                        else:
                                            plotc = pltcolor[(cycle//2) % (len(pltcolor) - 1)]
                                        if fc!=0:
                                            plt.plot(zm_plotx, zm_ploty, plotc+"-o", markersize=2,label='hh')
                                            plt.pause(0.1)

                                for i in range(1, chain1.linx_num):
                                    if i&0x1:
                                        recordfreq=even_freq_real
                                    else:
                                        recordfreq=odd_freq_real
                                    fobj.writelines(
                                            "%d,%d,%d,%s,%s,%s,%.4f,%.4f,%d,%d,%.4f,%.4f,%.5f,%.5f,%.5f,%.3f,%.3f,%s,%s,%s,%s,%s,%s\n" \
                                            % (i+1,setid,test_list[i],LFNS, Rext, gain, recordfreq,freqRead,Tset,Vset, tmp_Tm_list[0][i], tmp_Tg_list[0][i],
                                               tmp_main_list[0][i],tmp_guard_list[0][i], tmp_VZM[0][i], zm_list[0][i - 1], zm_list[1][i - 1],
                                               zm_list[2][i - 1], zm_list[3][i - 1],Vreal_code_list[i - 1], Vimag_code_list[i - 1], chain1.ZrealRSCcur[0][i],Test_time))
                                fobj.flush()
                                loop += 1
                                if loop >= Loop_num:
                                    chain1.get_ZM(ID=0xFF, rstZMPh="Reset", clrExeCnt="NoReset", equidist="NoReset", resetRSC="ResetRSC")
                                    break
                    while True:
                        if chain1.set_ZMCurr(ID=0xFF, enZM="Stop", enXCS="Internal", hiPass="1x") == False: continue
                        break
                # --stop impendance measure-- #
                while True:
                    if chain1.set_ZMCurr(ID=0xFF, enZM="Stop", enXCS="Internal", hiPass="1x") == False: continue
                    break
            print("\nEnd date/time:", time.strftime("%Y-%m-%d %H:%M:%S", time.localtime()))

        test.oven.setTemp(temp=25, delay=60) if test.oven != None else None
        test.oven.stop() if test.oven != None else None
        
        return True

def main():
    print("\n%s\n*%sWelcome to the program for LINX operating!%s*\n%s" %("* "*40, " "*17, " "*18, "* "*40))
    if ZM() == False:
       pass
    return
def generate_reset():
    chain1.open()
    chain1.Initialise(GenPOR="Generate")
def gernerate_chart():
    plt.figure()
    # plt.ion()
    plt.xlim(pltxminum, pltxmaxum)
    plt.ylim(pltyminum, pltymaxum)
    plt.xlabel("Zreal(mohm)")
    plt.ylabel("Zimage(mohm)")
    # plt.bar(label='1')
    plt.pause(0.1)

if __name__ == "__main__":
    
    main()
    if 0:
        try:
            if zm_mode_set==3:
                gernerate_chart()
            main()
        except:
            print("except")
            while True:
                if chain1.set_ZMCurr(ID=0xFF, enZM="Stop", enXCS="Internal", hiPass="1x") == False: continue
                break
    exit()
